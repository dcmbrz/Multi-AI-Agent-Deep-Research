Deep Researching Agent mk1
Deep Researching Agent mk1 is an AI-powered research tool built on a multi-agent architecture using the CrewAI framework. The project is designed to perform in-depth research by orchestrating specialized agents—each responsible for distinct tasks such as data collection, analysis, and narrative synthesis. The system integrates external research tools and APIs to generate comprehensive research reports in Markdown format.

Table of Contents
Overview
Features
Project Structure
Installation
Usage
Running the Base Version
Running the Streamlit UI
How It Works
Dependencies
Contributing
License
Acknowledgments
Contact
Overview
Deep Researching Agent mk1 leverages a multi-agent design to perform comprehensive research on various topics. Users can input a research topic, and the system automatically initiates a series of tasks:

Research Agent: Collects relevant data from various sources.
Analysis Agent: Synthesizes and evaluates the collected data.
Writing Agent: Produces a coherent and polished research report.
The project integrates with external tools like the EXA Answer Tool to retrieve detailed answers and citations, ensuring that the research output is both accurate and well-referenced.

Features
Multi-Agent Architecture: Orchestrates Research, Analysis, and Writing agents for a seamless workflow.
Interactive UI: Provides a Streamlit-based interface for easy input and real-time feedback.
External API Integration: Utilizes tools such as EXA Answer Tool, SerperDevTool, and WebsiteSearchTool.
Comprehensive Reporting: Generates structured research reports in Markdown, including sections for titles, abstracts, key findings, and citations.
Modular Design: Easily extendable for additional research functionalities and tool integrations.
Logging & Debugging: Built-in logging for smooth development and troubleshooting.
Project Structure
.env
Contains environment variables and API keys (e.g., OPENAI_API_KEY, EXA_API_KEY, SERPER_API_KEY).

ai_agent base version.py
A simplified version of the research agent that can be run from the command line. It uses the EXA Answer Tool to answer queries based on user input.

ai_agents.py
The main file for the Streamlit UI version. This version sets up multiple agents (Research, Analysis, Writing) and provides an interactive web interface.

requirements.txt
Lists all Python dependencies required to run the project.

research_report.md
An example output file containing a comprehensive research report generated by the agents.

Installation
Clone the repository:

bash
Copy
git clone <repository_url>
cd <repository_directory>
Create and activate a virtual environment:

bash
Copy
python -m venv env
source env/bin/activate  # On Windows: env\Scripts\activate
Install dependencies:

bash
Copy
pip install -r requirements.txt
Configure Environment Variables: Create a .env file in the project root with the following content:

ini
Copy
OPENAI_API_KEY=your_openai_api_key
EXA_API_KEY=your_exa_api_key
SERPER_API_KEY=your_serper_api_key
Replace the placeholders with your actual API keys.

Usage
Running the Base Version
To run the command-line version of the research agent:

bash
Copy
python "ai_agent base version.py"
When prompted, enter your research topic. The agent will process the input and generate a research report.

Running the Streamlit UI
To launch the interactive research interface:

bash
Copy
streamlit run ai_agents.py
This will open a new browser window where you can:

Input a research topic.
Initiate the research process.
View real-time status updates and the final research report.
How It Works
Research Agent:
Initiates the research process by collecting data using external tools and APIs.

Analysis Agent:
Processes the collected data to identify key themes, evaluate credibility, and generate actionable insights.

Writing Agent:
Synthesizes the analysis into a well-structured Markdown report, complete with sections for article titles, authors, abstracts, and relevant citations.

EXA Answer Tool:
Handles external queries to provide detailed answers and manage citations, enhancing the depth of the research report.

Dependencies
The project relies on the following libraries and tools:

CrewAI – For managing agents and orchestrating tasks.
CrewAI-tools – Additional tools for enhancing agent capabilities.
exa-py – For interacting with the EXA API.
Ollama – For alternative LLM integration.
langchain_openai – For language model interactions.
langchain_community – For community-driven language model tools.
streamlit – For the interactive web UI.